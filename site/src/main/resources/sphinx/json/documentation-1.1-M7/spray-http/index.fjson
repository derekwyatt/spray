{"body": "<div class=\"section\" id=\"spray-http\">\n<span id=\"id1\"></span><h1>spray-http</h1>\n<p>The <em>spray-http</em> module contains a fully immutable, case-class based model of the major HTTP data structures, like\nHTTP requests, responses and common headers. It also includes a parser for the latter, which is able to construct\nthe more structured header models from raw, unstructured header name/value pairs.</p>\n<div class=\"section\" id=\"dependencies\">\n<h2>Dependencies</h2>\n<p><em>spray-http</em> is stand-alone in that it has no dependency on any other <em>spray</em> module and not even Akka.\nYou can therefore use it directly and independently for any other type of HTTP work you might be doing.</p>\n<p>Apart from the Scala library (see <a class=\"reference internal\" href=\"../../project-info/current-versions/#current-versions\"><em>Current Version(s)</em></a> chapter) <em>spray-http</em> only depends on <a class=\"reference external\" href=\"http://parboiled.org\">parboiled</a>,\na lightweight PEG parsing library providing the basis for the header parser. Since <a class=\"reference external\" href=\"http://parboiled.org\">parboiled</a> is also written and\nmaintained by the members of the <em>spray</em> team it&#8217;s not an &#8220;outside&#8221; dependency that we have no control over.</p>\n</div>\n<div class=\"section\" id=\"installation\">\n<h2>Installation</h2>\n<p>The <a class=\"reference internal\" href=\"../../project-info/maven-repository/#maven-repo\"><em>Maven Repository</em></a> chapter contains all the info about how to pull <em>spray-http</em> into your classpath.</p>\n<p>Afterwards just <tt class=\"docutils literal\"><span class=\"pre\">import</span> <span class=\"pre\">spray.http._</span></tt> to bring all relevant identifiers into scope.</p>\n</div>\n<div class=\"section\" id=\"overview\">\n<h2>Overview</h2>\n<p>Since <em>spray-http</em> provides the central HTTP data structures for <em>spray</em> you will find the following import\nin quite a few places around the <em>spray</em> code base (and probably your own code as well):</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n</pre></div>\n</div>\n<p>This brings in scope all of the relevant things that are defined <a class=\"reference external\" href=\"https://github.com/spray/spray/tree/master/spray-http/src/main/scala/spray/http\">here</a> and that you&#8217;ll want to work with, mainly:</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt>, the central message models</li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">ChunkedRequestStart</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">ChunkedResponseStart</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">MessageChunk</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">ChunkedMessageEnd</span></tt> modeling the different\nmessage parts of request/response streams</li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">HttpHeaders</span></tt>, an object containing all the defined HTTP header models</li>\n<li>Supporting types like <tt class=\"docutils literal\"><span class=\"pre\">HttpMethods</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">MediaTypes</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">StatusCodes</span></tt>, etc.</li>\n</ul>\n<p>A common pattern is that the model of a certain entity is represented by an immutable type (class or trait), while the\nactual instances of the entity defined by the HTTP spec live in an accompanying object carrying the name of the type\nplus a trailing &#8216;s&#8217;.</p>\n<p>For example:</p>\n<ul class=\"simple\">\n<li>The defined <tt class=\"docutils literal\"><span class=\"pre\">HttpMethod</span></tt> instances live in the <tt class=\"docutils literal\"><span class=\"pre\">HttpMethods</span></tt> object.</li>\n<li>The defined <tt class=\"docutils literal\"><span class=\"pre\">HttpCharset</span></tt> instances live in the <tt class=\"docutils literal\"><span class=\"pre\">HttpCharsets</span></tt> object.</li>\n<li>The defined <tt class=\"docutils literal\"><span class=\"pre\">HttpEncoding</span></tt> instances live in the <tt class=\"docutils literal\"><span class=\"pre\">HttpEncodings</span></tt> object.</li>\n<li>The defined <tt class=\"docutils literal\"><span class=\"pre\">HttpProtocol</span></tt> instances live in the <tt class=\"docutils literal\"><span class=\"pre\">HttpProtocols</span></tt> object.</li>\n<li>The defined <tt class=\"docutils literal\"><span class=\"pre\">MediaType</span></tt> instances live in the <tt class=\"docutils literal\"><span class=\"pre\">MediaTypes</span></tt> object.</li>\n<li>The defined <tt class=\"docutils literal\"><span class=\"pre\">StatusCode</span></tt> instances live in the <tt class=\"docutils literal\"><span class=\"pre\">StatusCodes</span></tt> object.</li>\n</ul>\n<p>You get the point.</p>\n<p>In order to develop a better understanding for how <em>spray</em> models HTTP you probably should take some time to browse\naround the <a class=\"reference external\" href=\"https://github.com/spray/spray/tree/master/spray-http/src/main/scala/spray/http\">spray-http sources</a> (ideally with an IDE that supports proper code navigation).</p>\n</div>\n<div class=\"section\" id=\"stage-message-parsing\">\n<h2>2-Stage Message Parsing</h2>\n<p>The center point of <em>spray-http</em> is the <tt class=\"docutils literal\"><span class=\"pre\">HttpMessage</span></tt> class with its sub-classes <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt>.\n<tt class=\"docutils literal\"><span class=\"pre\">HttpMessage</span></tt> defines the things that are shared between requests and responses, most importantly the HTTP headers\nand the message entity.</p>\n<p>One thing that&#8217;s important to understand is that <em>spray</em> follows <strong>a two-stage approach</strong> for creating the model\nstructure upon reception of an HTTP message from the network. In order to not waste resources on parsing and creation\nof model objects that the application doesn&#8217;t require the low-level modules <em>spray-can</em> and <em>spray-servlet</em> construct\nonly &#8220;basic versions&#8221; of an <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt>.</p>\n<p>In their &#8220;basic&#8221; incarnations an <tt class=\"docutils literal\"><span class=\"pre\">HttpMessage</span></tt> contains all its headers as <tt class=\"docutils literal\"><span class=\"pre\">RawHeader</span></tt> instances, which are not\nmuch more than a simple pair of name/value strings. For some applications this might be all that&#8217;s required.\nHowever, if you call the <tt class=\"docutils literal\"><span class=\"pre\">parseHeaders</span></tt> method of the message object all headers that <em>spray-http</em> has a\nhigher-level model for (the ones defined in <tt class=\"docutils literal\"><span class=\"pre\">HttpHeaders</span></tt>) are &#8220;upgraded&#8221; and returned with a fresh copy of the\nmessage object.</p>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> has a similar way of &#8220;upgrading&#8221; the URI and the query string from their raw, unparsed counterparts.</p>\n<p>The main point, where this &#8220;upgrading&#8221; of the request headers, uri and query string currently happens, is in the\n<tt class=\"docutils literal\"><span class=\"pre\">runRoute</span></tt> method of the <tt class=\"docutils literal\"><span class=\"pre\">HttpService</span></tt> trait in the <a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a> module. It transforms the &#8220;basic&#8221;\n<tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> instances coming in from the <a class=\"reference internal\" href=\"../spray-can/#spray-can\"><em>spray-can</em></a> or <a class=\"reference internal\" href=\"../spray-servlet/#spray-servlet\"><em>spray-servlet</em></a> layer into their fully-parsed\nstate, which is later used by many of the various <a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a> directives.</p>\n</div>\n<div class=\"section\" id=\"content-type-header\">\n<h2>Content-Type Header</h2>\n<p>One other thing worth highlighting is the special treatment of the HTTP <tt class=\"docutils literal\"><span class=\"pre\">Content-Type</span></tt> header. Because of its crucial\nrole in content negotiation its value has a special status in <em>spray</em>. It is part of the <tt class=\"docutils literal\"><span class=\"pre\">HttpBody</span></tt>, which is the\nnon-empty variant of an <tt class=\"docutils literal\"><span class=\"pre\">HttpEntity</span></tt>. The value of the <tt class=\"docutils literal\"><span class=\"pre\">Content-Type</span></tt> header is parsed into its higher-level model\nclass (i.e. &#8220;upgraded&#8221;) even by the low-level <a class=\"reference internal\" href=\"../spray-can/#spray-can\"><em>spray-can</em></a> and <a class=\"reference internal\" href=\"../spray-servlet/#spray-servlet\"><em>spray-servlet</em></a> layers.</p>\n</div>\n<div class=\"section\" id=\"custom-media-types\">\n<h2>Custom Media-Types</h2>\n<p><em>spray-http</em> defines the most important media types from the <a class=\"reference external\" href=\"http://www.iana.org/assignments/media-types/index.html\">IANA MIME media type registry</a> in the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-http/src/main/scala/spray/http/MediaType.scala\">MediaTypes</a>\nobject, which also acts as a registry that you can register your own <tt class=\"docutils literal\"><span class=\"pre\">CustomMediaType</span></tt> instances with:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.http.MediaTypes._</span>\n<span class=\"k\">val</span> <span class=\"nc\">MarkdownType</span> <span class=\"k\">=</span> <span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">CustomMediaType</span><span class=\"o\">(</span><span class=\"s\">&quot;text/x-markdown&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;markdown&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;mdown&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;md&quot;</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>Once registered the custom type will be properly resolved, e.g. for incoming requests by <a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a> or\nincoming responses by <a class=\"reference internal\" href=\"../spray-client/#spray-client\"><em>spray-client</em></a>. File extension resolution (as used for example by the\n<a class=\"reference internal\" href=\"../spray-routing/file-and-resource-directives/#fileandresourcedirectives\"><em>FileAndResourceDirectives</em></a>) will work as expected.</p>\n</div>\n</div>\n", "display_toc": true, "title": "spray-http", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-http/index", "next": {"link": "../spray-httpx/", "title": "spray-httpx"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-httpx/index", "spray-httpx", "N", "next"], ["documentation/spray-client/index", "spray-client", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Documentation"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">spray-http</a><ul>\n<li><a class=\"reference internal\" href=\"#dependencies\">Dependencies</a></li>\n<li><a class=\"reference internal\" href=\"#installation\">Installation</a></li>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#stage-message-parsing\">2-Stage Message Parsing</a></li>\n<li><a class=\"reference internal\" href=\"#content-type-header\">Content-Type Header</a></li>\n<li><a class=\"reference internal\" href=\"#custom-media-types\">Custom Media-Types</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../spray-client/", "title": "spray-client"}, "metatags": ""}