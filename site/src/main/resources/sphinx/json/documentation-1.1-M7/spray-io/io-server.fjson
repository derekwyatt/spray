{"body": "<div class=\"section\" id=\"ioserver\">\n<span id=\"id1\"></span><h1>IOServer</h1>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/IOServer.scala\">IOServer</a> is a simple actor base class for server-side networking components.\nIt builds upon an <a class=\"reference internal\" href=\"../io-bridge/#iobridge\"><em>IOBridge</em></a> and provides server-side connection management. An <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> cannot be used\ndirectly but has to be subclassed (potentially mixing in the <a class=\"reference internal\" href=\"../connection-actors/#connectionactors\"><em>ConnectionActors</em></a> trait) and augmented\nwith the custom application logic that actually does whatever the specific networking server is supposed to do.\nIn that sense the <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> class merely provides the &#8220;boilerplate&#8221; logic common to most <em>spray-io</em> based network\nservers.</p>\n<p>After having created an <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> actor instance you typically send it a <tt class=\"docutils literal\"><span class=\"pre\">Bind</span></tt> message, which causes it to listen\nfor incoming connections on a specific interface/port. When the server is up the sender of the <tt class=\"docutils literal\"><span class=\"pre\">Bind</span></tt> receives a\n<tt class=\"docutils literal\"><span class=\"pre\">Bound</span></tt> event and subsequently a <tt class=\"docutils literal\"><span class=\"pre\">Connected</span></tt> event for every new connection that has been accepted.\nOnce bound the server can be unbound with an <tt class=\"docutils literal\"><span class=\"pre\">Unbind</span></tt> command.</p>\n<p>In its original form, without mixing in the <a class=\"reference internal\" href=\"../connection-actors/#connectionactors\"><em>ConnectionActors</em></a> trait, an <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> designates itself as the\nhandler of all network events. You will therefore have to augment its <tt class=\"docutils literal\"><span class=\"pre\">receive</span></tt> behavior with your own logic\nhandling incoming <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> events as well as generating the appropriate <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands.</p>\n<div class=\"section\" id=\"examples\">\n<h2>Examples</h2>\n<p>One example of a network server based on the <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> is the <em>spray-can</em> <a class=\"reference internal\" href=\"../../spray-can/http-server/#httpserver\"><em>HttpServer</em></a>. You might find\n<a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-can/src/main/scala/spray/can/server/HttpServer.scala\">its sources</a> quite readable.</p>\n<p>Another example is the <tt class=\"docutils literal\"><span class=\"pre\">echo-server</span></tt> implementation that can be found <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/examples/spray-io/echo-server/src/main/scala/spray/examples/Main.scala\">here</a>.\nIt presents a simple echo server that you can <tt class=\"docutils literal\"><span class=\"pre\">telnet</span></tt> to.</p>\n<p>To run it, simply check out the <em>spray</em> codebase and run <tt class=\"docutils literal\"><span class=\"pre\">sbt</span> <span class=\"pre\">&quot;project</span> <span class=\"pre\">echo-server&quot;</span> <span class=\"pre\">run</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"messaging-protocol\">\n<h2>Messaging Protocol</h2>\n<p>The convention in <em>spray</em> is to make all custom message types that a certain actor consumes or sends out available\nin the actors companion object. In this regard the <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> is no exception, you can find all commands and events\nthat an <tt class=\"docutils literal\"><span class=\"pre\">IOServer</span></tt> works with in <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/IOServer.scala\">its companion object</a></p>\n</div>\n</div>\n", "display_toc": true, "title": "IOServer", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-io/io-server", "next": {"link": "../connection-actors/", "title": "ConnectionActors"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-io/connection-actors", "ConnectionActors", "N", "next"], ["documentation/spray-io/io-client", "IOClient", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-io"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">IOServer</a><ul>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n<li><a class=\"reference internal\" href=\"#messaging-protocol\">Messaging Protocol</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../io-client/", "title": "IOClient"}, "metatags": ""}