{"body": "<div class=\"section\" id=\"predefined-stages\">\n<h1>Predefined Stages</h1>\n<p><em>spray-io</em> comes with a number of predefined pipeline stages, which you can &#8220;bake into&#8221; your own pipeline stack, where\nyou seem fit.</p>\n<div class=\"section\" id=\"tickgenerator\">\n<span id=\"id1\"></span><h2>TickGenerator</h2>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/TickGenerator.scala\">TickGenerator</a> forms a simple <tt class=\"docutils literal\"><span class=\"pre\">event-only</span> <span class=\"pre\">stage</span></tt> that generates <tt class=\"docutils literal\"><span class=\"pre\">Tick</span></tt> events in regular intervals.\nThis is its implementation:</p>\n<blockquote>\n<div></div></blockquote>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">TickGenerator</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">millis</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">PipelineStage</span> <span class=\"o\">=</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"nc\">Duration</span><span class=\"o\">(</span><span class=\"n\">millis</span><span class=\"o\">,</span> <span class=\"nc\">MILLISECONDS</span><span class=\"o\">))</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">period</span><span class=\"k\">:</span> <span class=\"kt\">FiniteDuration</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">PipelineStage</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">require</span><span class=\"o\">(</span><span class=\"n\">period</span> <span class=\"o\">&gt;</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Zero</span><span class=\"o\">,</span> <span class=\"s\">&quot;period must be positive&quot;</span><span class=\"o\">)</span>\n\n    <span class=\"k\">new</span> <span class=\"nc\">PipelineStage</span> <span class=\"o\">{</span>\n      <span class=\"k\">def</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"k\">:</span> <span class=\"kt\">PipelineContext</span><span class=\"o\">,</span> <span class=\"n\">commandPL</span><span class=\"k\">:</span> <span class=\"kt\">CPL</span><span class=\"o\">,</span> <span class=\"n\">eventPL</span><span class=\"k\">:</span> <span class=\"kt\">EPL</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Pipelines</span> <span class=\"o\">=</span>\n        <span class=\"k\">new</span> <span class=\"nc\">Pipelines</span> <span class=\"o\">{</span>\n          <span class=\"k\">val</span> <span class=\"n\">generator</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n            <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">connectionActorContext</span><span class=\"o\">.</span><span class=\"n\">system</span>\n            <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"o\">(</span>\n              <span class=\"n\">initialDelay</span> <span class=\"k\">=</span> <span class=\"n\">period</span><span class=\"o\">,</span>\n              <span class=\"n\">interval</span> <span class=\"k\">=</span> <span class=\"n\">period</span><span class=\"o\">,</span>\n              <span class=\"n\">receiver</span> <span class=\"k\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">self</span><span class=\"o\">,</span>\n              <span class=\"n\">message</span> <span class=\"k\">=</span> <span class=\"nc\">Tick</span>\n            <span class=\"o\">)(</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span><span class=\"o\">)</span>\n          <span class=\"o\">}</span>\n\n          <span class=\"k\">val</span> <span class=\"n\">commandPipeline</span> <span class=\"k\">=</span> <span class=\"n\">commandPL</span>\n\n          <span class=\"k\">val</span> <span class=\"n\">eventPipeline</span><span class=\"k\">:</span> <span class=\"kt\">EPL</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n            <span class=\"k\">case</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">IOPeer.Closed</span> <span class=\"o\">=&gt;</span>\n              <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"o\">()</span>\n              <span class=\"n\">eventPL</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">eventPL</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c1\">////////////// COMMANDS //////////////</span>\n  <span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">Tick</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span> <span class=\"k\">with</span> <span class=\"nc\">Droppable</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">TickGenerator</span></tt> provides the triggers for all timeout checking stages in <em>spray-io</em> and <a class=\"reference internal\" href=\"../../spray-can/#spray-can\"><em>spray-can</em></a>, but, of\ncourse, you can also use it for other purposes.</p>\n</div>\n<div class=\"section\" id=\"connectiontimeouts\">\n<span id=\"id3\"></span><h2>ConnectionTimeouts</h2>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/ConnectionTimeouts.scala\">ConnectionTimeouts</a> pipeline stage provides support for the automatic closing of idle connection after a\nconfigurable time period. The stage is modeled as a <tt class=\"docutils literal\"><span class=\"pre\">full</span> <span class=\"pre\">stage</span></tt> that listens for outgoing <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands\nas well as incoming <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> events and updates a <tt class=\"docutils literal\"><span class=\"pre\">lastActivity</span></tt> timestamp, whenever it sees one such message.</p>\n<p>It requires a <a class=\"reference internal\" href=\"#tickgenerator\">TickGenerator</a> stage further down in the stack and uses its <tt class=\"docutils literal\"><span class=\"pre\">Tick</span></tt> messages as a trigger for checking,\nwhether the connection has been idle for longer than the allowed time frame. If so, a <tt class=\"docutils literal\"><span class=\"pre\">Close</span></tt> command is issued.</p>\n</div>\n<div class=\"section\" id=\"ssltlssupport\">\n<h2>SslTlsSupport</h2>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/SslTlsSupport.scala\">SslTlsSupport</a> pipeline stage provides for transparent encryption of outgoing <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands as well as\ndecryption of incoming <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> commands. Just add it as a lower-level stage to your pipeline stack, whenever you\nneed SSL/TLS encryption, and all your network communication can be SSL encrypted automatically.</p>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">SslTlsSupport</span></tt> also allows for the enabling/disabling of the encryption stage on a per-connection basis.\nThis is controlled via the connection &#8220;tag&#8221;, check the <a class=\"reference internal\" href=\"../connection-tags/#connection-tags\"><em>Connection Tags</em></a> chapter for more info on this.\nIf the connection tag does not implement the <tt class=\"docutils literal\"><span class=\"pre\">SslTlsSupport.Enabling</span></tt> trait the decision, whether to encrypt the\nconnection or not, is determined via the <tt class=\"docutils literal\"><span class=\"pre\">encryptIfUntagged</span></tt> parameter specified at pipeline stage creation.</p>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">SslTlsSupport</span></tt> stage requires also requires an <tt class=\"docutils literal\"><span class=\"pre\">engineProvider</span></tt> parameter, which is a function\n<tt class=\"docutils literal\"><span class=\"pre\">PipelineContext</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">SSLEngine</span></tt>. The easiest way to specify an argument for this parameter is to use the default\n<tt class=\"docutils literal\"><span class=\"pre\">ServerSSLEngineProvider</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">ClientSSLEngineProvider</span></tt>, depending on whether you are using the encryption stage\non the client- or the server-side, e.g.:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">engineProvider</span> <span class=\"k\">=</span> <span class=\"nc\">ServerSSLEngineProvider</span><span class=\"o\">.</span><span class=\"n\">default</span>\n</pre></div>\n</div>\n<p>In order to make this line compile you also need to bring into scope either an implicit <tt class=\"docutils literal\"><span class=\"pre\">javax.net.ssl.SSLContext</span></tt>\nor an implicit <tt class=\"docutils literal\"><span class=\"pre\">SSLContextProvider</span></tt>.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Predefined Stages", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-io/predefined-stages", "next": {"link": "../connection-tags/", "title": "Connection Tags"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-io/connection-tags", "Connection Tags", "N", "next"], ["documentation/spray-io/pipelining", "Pipelining", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-io"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Predefined Stages</a><ul>\n<li><a class=\"reference internal\" href=\"#tickgenerator\">TickGenerator</a></li>\n<li><a class=\"reference internal\" href=\"#connectiontimeouts\">ConnectionTimeouts</a></li>\n<li><a class=\"reference internal\" href=\"#ssltlssupport\">SslTlsSupport</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../pipelining/", "title": "Pipelining"}, "metatags": ""}