{"body": "<div class=\"section\" id=\"ioclient\">\n<span id=\"id1\"></span><h1>IOClient</h1>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/IOClient.scala\">IOClient</a> is a simple actor base class for client-side networking components.\nIt builds upon an <a class=\"reference internal\" href=\"../io-bridge/#iobridge\"><em>IOBridge</em></a> and provides client-side connection management. An <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> cannot be used\ndirectly but has to be subclassed (potentially mixing in the <a class=\"reference internal\" href=\"../connection-actors/#connectionactors\"><em>ConnectionActors</em></a> trait) and augmented\nwith the custom application logic that actually does whatever the specific networking client is supposed to do.\nIn that sense the <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> class merely provides the &#8220;boilerplate&#8221; logic common to most <em>spray-io</em> based network\nclients.</p>\n<p>After having created an <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> actor instance you typically send it a <tt class=\"docutils literal\"><span class=\"pre\">Connect</span></tt> message, which is either\nresponded to with a <tt class=\"docutils literal\"><span class=\"pre\">Connected</span></tt> event after the connection has been established, or a <tt class=\"docutils literal\"><span class=\"pre\">Status.Failure</span></tt> message\n(which is automatically turned into Future failures, if the <tt class=\"docutils literal\"><span class=\"pre\">Connect</span></tt> was sent with an <tt class=\"docutils literal\"><span class=\"pre\">ask</span></tt>).</p>\n<p>In its original form, without mixing in the <a class=\"reference internal\" href=\"../connection-actors/#connectionactors\"><em>ConnectionActors</em></a> trait, an <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> designates itself as the\nhandler of all network events. You will therefore have to augment its <tt class=\"docutils literal\"><span class=\"pre\">receive</span></tt> behavior with your own logic\ngenerating the appropriate <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands as well as handling incoming <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> events.</p>\n<div class=\"section\" id=\"examples\">\n<h2>Examples</h2>\n<p>One example of a network client based on the <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> is the <em>spray-can</em> <a class=\"reference internal\" href=\"../../spray-can/http-client/#httpclient\"><em>HttpClient</em></a>. You might find\n<a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-can/src/main/scala/spray/can/client/HttpClient.scala\">its sources</a> quite readable.</p>\n<p>Another (admittedly very contrived and overly simplified) example is presented here:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.util.concurrent.TimeUnit._</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.duration.Duration</span>\n<span class=\"k\">import</span> <span class=\"nn\">akka.util.Timeout</span>\n<span class=\"k\">import</span> <span class=\"nn\">akka.pattern.ask</span>\n<span class=\"k\">import</span> <span class=\"nn\">akka.actor._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.util._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.io._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoClient</span><span class=\"o\">(</span><span class=\"nc\">_ioBridge</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">IOClient</span><span class=\"o\">(</span><span class=\"nc\">_ioBridge</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">var</span> <span class=\"n\">pingSender</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">ActorRef</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">None</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"n\">myReceive</span> <span class=\"n\">orElse</span> <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"n\">receive</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">myReceive</span><span class=\"k\">:</span> <span class=\"kt\">Receive</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">EchoClient</span><span class=\"o\">.</span><span class=\"nc\">Ping</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">pingSender</span> <span class=\"k\">=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">sender</span><span class=\"o\">)</span>\n      <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">ioBridge</span> <span class=\"o\">!</span> <span class=\"nc\">IOBridge</span><span class=\"o\">.</span><span class=\"nc\">Send</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"nc\">BufferBuilder</span><span class=\"o\">(</span><span class=\"s\">&quot;PING&quot;</span><span class=\"o\">).</span><span class=\"n\">toByteBuffer</span><span class=\"o\">)</span>\n\n    <span class=\"k\">case</span> <span class=\"nc\">IOClient</span><span class=\"o\">.</span><span class=\"nc\">Received</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">pingSender</span><span class=\"o\">.</span><span class=\"n\">foreach</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">!</span> <span class=\"nc\">EchoClient</span><span class=\"o\">.</span><span class=\"nc\">PingResponse</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">drainToString</span><span class=\"o\">))</span>\n\n    <span class=\"k\">case</span> <span class=\"nc\">IOClient</span><span class=\"o\">.</span><span class=\"nc\">Closed</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">reason</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"o\">(</span><span class=\"s\">&quot;Connection closed: {}&quot;</span><span class=\"o\">,</span> <span class=\"n\">reason</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">EchoClient</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Ping</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Connection</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Command</span>\n  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">PingResponse</span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoServer</span><span class=\"o\">(</span><span class=\"nc\">_ioBridge</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">IOServer</span><span class=\"o\">(</span><span class=\"nc\">_ioBridge</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"n\">receive</span> <span class=\"n\">orElse</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">IOServer</span><span class=\"o\">.</span><span class=\"nc\">Received</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"o\">)</span> <span class=\"k\">if</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">duplicate</span><span class=\"o\">.</span><span class=\"n\">drainToString</span> <span class=\"o\">==</span> <span class=\"s\">&quot;PING&quot;</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">sender</span> <span class=\"o\">!</span> <span class=\"nc\">IOBridge</span><span class=\"o\">.</span><span class=\"nc\">Send</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"nc\">BufferBuilder</span><span class=\"o\">(</span><span class=\"s\">&quot;PONG&quot;</span><span class=\"o\">).</span><span class=\"n\">toByteBuffer</span><span class=\"o\">)</span>\n      <span class=\"n\">sender</span> <span class=\"o\">!</span> <span class=\"nc\">IOBridge</span><span class=\"o\">.</span><span class=\"nc\">Close</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"nc\">ConnectionCloseReasons</span><span class=\"o\">.</span><span class=\"nc\">CleanClose</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n\n<span class=\"k\">val</span> <span class=\"n\">ioBridge</span> <span class=\"k\">=</span> <span class=\"nc\">IOExtension</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">).</span><span class=\"n\">ioBridge</span><span class=\"o\">()</span>\n\n<span class=\"k\">val</span> <span class=\"n\">server</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span><span class=\"o\">(</span><span class=\"nc\">Props</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">EchoServer</span><span class=\"o\">(</span><span class=\"n\">ioBridge</span><span class=\"o\">)),</span> <span class=\"s\">&quot;server&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">client</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span><span class=\"o\">(</span><span class=\"nc\">Props</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">EchoClient</span><span class=\"o\">(</span><span class=\"n\">ioBridge</span><span class=\"o\">)),</span> <span class=\"s\">&quot;client&quot;</span><span class=\"o\">)</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">timeout</span><span class=\"k\">:</span> <span class=\"kt\">Timeout</span> <span class=\"o\">=</span> <span class=\"nc\">Duration</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"nc\">SECONDS</span><span class=\"o\">)</span> <span class=\"c1\">// timeout for the asks below</span>\n\n<span class=\"c1\">// bind the server to a local port and wait for it to come up</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"o\">(</span><span class=\"nc\">IOServer</span><span class=\"o\">.</span><span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"s\">&quot;localhost&quot;</span><span class=\"o\">,</span> <span class=\"mi\">46468</span><span class=\"o\">)).</span><span class=\"n\">await</span>\n\n<span class=\"c1\">// ask the client to connect to the server and wait for the connection to come up</span>\n<span class=\"k\">val</span> <span class=\"nc\">IOClient</span><span class=\"o\">.</span><span class=\"nc\">Connected</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"o\">(</span><span class=\"nc\">IOClient</span><span class=\"o\">.</span><span class=\"nc\">Connect</span><span class=\"o\">(</span><span class=\"s\">&quot;localhost&quot;</span><span class=\"o\">,</span> <span class=\"mi\">46468</span><span class=\"o\">)).</span><span class=\"n\">await</span>\n\n<span class=\"c1\">// ping the server and wait for the response</span>\n<span class=\"k\">val</span> <span class=\"nc\">EchoClient</span><span class=\"o\">.</span><span class=\"nc\">PingResponse</span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"o\">(</span><span class=\"nc\">EchoClient</span><span class=\"o\">.</span><span class=\"nc\">Ping</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">)).</span><span class=\"n\">await</span>\n\n<span class=\"n\">response</span> <span class=\"o\">===</span> <span class=\"s\">&quot;PONG&quot;</span>\n\n<span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"o\">()</span>\n</pre></div>\n</div>\n<p>Note than this example uses blocking calls to wait for future results, which is something that you probably do not\nwant to do in a performance-sensitive part of your application. Also, for brevity reasons the example omits all\nerror handling logic.</p>\n</div>\n<div class=\"section\" id=\"messaging-protocol\">\n<h2>Messaging Protocol</h2>\n<p>The convention in <em>spray</em> is to make all custom message types that a certain actor consumes or sends out available\nin the actors companion object. In this regard the <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> is no exception, you can find all commands and events\nthat an <tt class=\"docutils literal\"><span class=\"pre\">IOClient</span></tt> works with in <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/IOClient.scala\">its companion object</a></p>\n</div>\n</div>\n", "display_toc": true, "title": "IOClient", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-io/io-client", "next": {"link": "../io-server/", "title": "IOServer"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-io/io-server", "IOServer", "N", "next"], ["documentation/spray-io/io-bridge", "IOBridge", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-io"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">IOClient</a><ul>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n<li><a class=\"reference internal\" href=\"#messaging-protocol\">Messaging Protocol</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../io-bridge/", "title": "IOBridge"}, "metatags": ""}