{"body": "<div class=\"section\" id=\"testing-pipelines\">\n<span id=\"id1\"></span><h1>Testing Pipelines</h1>\n<p>Besides the architectural cleanliness a nice side effect of <em>spray-ios</em> <a class=\"reference internal\" href=\"../pipelining/#pipelining\"><em>Pipelining</em></a> architecture is that you can test\nindividual pipeline stages, or complete stacks of them, easily and without the need to fire up actors.</p>\n<p><em>spray-io</em> comes with the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/main/scala/spray/io/PipelineStageTest.scala\">PipelineStageTest</a> trait, which you can mix into any test specification. It gives you a\nsmall DSL that allows for convenient testing of a pipeline stage (which can also be a combination of sub stages).</p>\n<p>As an example you might want to take a look at the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-io/src/test/scala/spray/io/ConnectionTimeoutsSpec.scala\">ConnectionTimeoutsSpec</a>, which tests the <a class=\"reference internal\" href=\"../predefined-stages/#connectiontimeouts\"><em>ConnectionTimeouts</em></a>\npipeline stage.</p>\n<div class=\"section\" id=\"overview\">\n<h2>Overview</h2>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">PipelineStageTest</span></tt> trait contains a &#8220;pimp&#8221; for <tt class=\"docutils literal\"><span class=\"pre\">PipelineStage</span></tt> instances, which gives you a <tt class=\"docutils literal\"><span class=\"pre\">test</span></tt> method\ntaking a body of test code:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">stage</span><span class=\"k\">:</span> <span class=\"kt\">PipelineStage</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">stage</span><span class=\"o\">.</span><span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"o\">...</span> <span class=\"c1\">// test code</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>The code running &#8220;inside&#8221; of the <tt class=\"docutils literal\"><span class=\"pre\">test</span></tt> method has access to a number of helpers allowing for pushing commands and\nevents through the pipeline stage and inspecting the produced messages.</p>\n</div>\n<div class=\"section\" id=\"process\">\n<h2>Process</h2>\n<p>The most important helper is <tt class=\"docutils literal\"><span class=\"pre\">process</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"n\">cmdsAndEvents</span><span class=\"k\">:</span> <span class=\"kt\">AnyRef*</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">ProcessResult</span> <span class=\"o\">=</span>\n</pre></div>\n</div>\n<p>It allows you to push a number of commands and/or events into the respective ends of the pipeline stage and collect\nthe commands and events produced by the stage:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">stage</span><span class=\"k\">:</span> <span class=\"kt\">PipelineStage</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">stage</span><span class=\"o\">.</span><span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">result</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">MyCommand</span><span class=\"o\">,</span> <span class=\"nc\">MyEvent</span><span class=\"o\">)</span>\n  <span class=\"o\">...</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>The result produced by the <tt class=\"docutils literal\"><span class=\"pre\">process</span></tt> method is an instance of <tt class=\"docutils literal\"><span class=\"pre\">ProcessResult</span></tt>, which is defined as such:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">ProcessResult</span><span class=\"o\">(</span><span class=\"n\">commands</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Command</span><span class=\"o\">],</span> <span class=\"n\">events</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Event</span><span class=\"o\">])</span>\n</pre></div>\n</div>\n<p>It contains a &#8220;snapshot&#8221; of the current state of the internal message collector. If you call <tt class=\"docutils literal\"><span class=\"pre\">process</span></tt> several times\nthe collected messages will accumulate. So, this snippet:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">MyCommand</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">result</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">MyEvent</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>is equivalent to this one:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">result</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">MyCommand</span><span class=\"o\">,</span> <span class=\"nc\">MyEvent</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>You can clear the message collector with <tt class=\"docutils literal\"><span class=\"pre\">clear()</span></tt>. Also there are two variants of <tt class=\"docutils literal\"><span class=\"pre\">process</span></tt>, which combine it with\na <tt class=\"docutils literal\"><span class=\"pre\">clear()</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">clearAndProcess</span><span class=\"o\">(</span><span class=\"n\">cmdsAndEvents</span><span class=\"k\">:</span> <span class=\"kt\">AnyRef*</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">ProcessResult</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"n\">clear</span><span class=\"o\">()</span>\n  <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"n\">cmdsAndEvents</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">def</span> <span class=\"n\">processAndClear</span><span class=\"o\">(</span><span class=\"n\">cmdsAndEvents</span><span class=\"k\">:</span> <span class=\"kt\">AnyRef*</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">ProcessResult</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"n\">cmdsAndEvents</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span>\n  <span class=\"n\">clear</span><span class=\"o\">()</span>\n  <span class=\"n\">x</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"extractors\">\n<h2>Extractors</h2>\n<p>Once you have a <tt class=\"docutils literal\"><span class=\"pre\">ProcessResult</span></tt> instance you could &#8220;manually&#8221; inspect it and express assertions against its contents\nusing the constructs of your test framework. For example, using <a class=\"reference external\" href=\"http://specs2.org\">specs2</a>, you might say something like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">stage</span><span class=\"k\">:</span> <span class=\"kt\">PipelineStage</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">stage</span><span class=\"o\">.</span><span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">result</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">MyCommand</span><span class=\"o\">,</span> <span class=\"nc\">MyEvent</span><span class=\"o\">)</span>\n  <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"nc\">MyFirstExpectedCommand</span>\n  <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"nc\">MySecondExpectedCommand</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>However, this manual decomposition of the <tt class=\"docutils literal\"><span class=\"pre\">ProcessResult</span></tt> can become tedious for more complex checks.\nUsing the simple <tt class=\"docutils literal\"><span class=\"pre\">Commands</span></tt> extractor that the <tt class=\"docutils literal\"><span class=\"pre\">PipelineStageTest</span></tt> trait provides the test becomes a bit better to\nread:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">stage</span><span class=\"k\">:</span> <span class=\"kt\">PipelineStage</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">stage</span><span class=\"o\">.</span><span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"nc\">Commands</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">second</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">MyCommand</span><span class=\"o\">,</span> <span class=\"nc\">MyEvent</span><span class=\"o\">)</span>\n  <span class=\"n\">first</span> <span class=\"o\">===</span> <span class=\"nc\">MyFirstExpectedCommand</span>\n  <span class=\"n\">second</span> <span class=\"o\">===</span> <span class=\"nc\">MySecondExpectedCommand</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>There is also an <tt class=\"docutils literal\"><span class=\"pre\">Events</span></tt> extractor that allows you to pattern match against the collected event messages.</p>\n</div>\n<div class=\"section\" id=\"message-conditioning\">\n<h2>Message Conditioning</h2>\n<p>Writing tests using <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands and <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> messages can be a bit inconvenient, since both of them carry\ntheir content in binary form as byte arrays wrapped by a <tt class=\"docutils literal\"><span class=\"pre\">java.nio.ByteBuffer</span></tt>. To simplify test code the\n<tt class=\"docutils literal\"><span class=\"pre\">PipelineStageTest</span></tt> therefore automatically converts <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands into <tt class=\"docutils literal\"><span class=\"pre\">SendString</span></tt> commands, which allow\nyou directly test against String literals:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"nc\">Commands</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">process</span><span class=\"o\">(...)</span>\n<span class=\"n\">msg</span> <span class=\"o\">===</span> <span class=\"nc\">SendString</span><span class=\"o\">(</span><span class=\"s\">&quot;expected content&quot;</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>The same is done on the event-side to <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> events, which are automatically converted to <tt class=\"docutils literal\"><span class=\"pre\">ReceivedString</span></tt>\nevents.</p>\n<p>Additionally the <tt class=\"docutils literal\"><span class=\"pre\">PipelineStageTest</span></tt> trait provides helpers to create <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">Received</span></tt> commands directly\nfrom strings:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">Received</span><span class=\"o\">(</span><span class=\"s\">&quot;received content&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Send</span><span class=\"o\">(</span><span class=\"s\">&quot;sent content&quot;</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"messages-to-and-from-actors\">\n<h2>Messages to and from Actors</h2>\n<p>Sometimes pipelines stage logic needs to use the <tt class=\"docutils literal\"><span class=\"pre\">sender</span></tt> reference of an incoming message. In order to simulate the\nreception of a message from a specific sender the <tt class=\"docutils literal\"><span class=\"pre\">PipelineStageTest</span></tt> provides the <tt class=\"docutils literal\"><span class=\"pre\">Message</span></tt> type:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"k\">:</span> <span class=\"kt\">AnyRef</span><span class=\"o\">,</span> <span class=\"n\">sender</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>For example, to feed the pipeline stage with a <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> command sent by <tt class=\"docutils literal\"><span class=\"pre\">sender1</span></tt> you would say:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">process</span><span class=\"o\">(</span><span class=\"nc\">Message</span><span class=\"o\">(</span><span class=\"nc\">Send</span><span class=\"o\">(</span><span class=\"s\">&quot;sent content&quot;</span><span class=\"o\">),</span> <span class=\"n\">sender1</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>In order to be able to verify that a pipeline stage sends the expected messages to other actors all pipeline stages\nshould use the <tt class=\"docutils literal\"><span class=\"pre\">IOPeer.Tell</span></tt> command, rather than sending the message directly. Not only does this allow you to treat\nmessage sending like any other command (and verify it using the techniques explained above), it also allows other\ndownstream stages in the command pipeline to see the <tt class=\"docutils literal\"><span class=\"pre\">Tell</span></tt> and potentially modify or react to it.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Testing Pipelines", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-io/testing-pipelines", "next": {"link": "../examples/", "title": "Examples"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-io/examples", "Examples", "N", "next"], ["documentation/spray-io/connection-tags", "Connection Tags", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-io"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Testing Pipelines</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#process\">Process</a></li>\n<li><a class=\"reference internal\" href=\"#extractors\">Extractors</a></li>\n<li><a class=\"reference internal\" href=\"#message-conditioning\">Message Conditioning</a></li>\n<li><a class=\"reference internal\" href=\"#messages-to-and-from-actors\">Messages to and from Actors</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../connection-tags/", "title": "Connection Tags"}, "metatags": ""}