{"body": "<div class=\"section\" id=\"spray-util\">\n<span id=\"id1\"></span><h1>spray-util</h1>\n<p>The <em>spray-util</em> module contains a number of smaller helper classes that are used by all other <em>spray</em> modules,\nexcept <a class=\"reference internal\" href=\"../spray-http/#spray-http\"><em>spray-http</em></a>, which is kept intentionally free of other <em>spray</em> dependencies.</p>\n<div class=\"section\" id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>Apart from the Scala library (see <a class=\"reference internal\" href=\"../../project-info/current-versions/#current-versions\"><em>Current Version(s)</em></a> chapter) <em>spray-util</em> only depends on\n<em>akka-actor</em> (with &#8216;provided&#8217; scope, i.e. you need to pull it in yourself).</p>\n</div>\n<div class=\"section\" id=\"installation\">\n<h2>Installation</h2>\n<p>The <a class=\"reference internal\" href=\"../../project-info/maven-repository/#maven-repo\"><em>Maven Repository</em></a> chapter contains all the info about how to pull <em>spray-util</em> into your classpath.</p>\n<p>Afterwards just <tt class=\"docutils literal\"><span class=\"pre\">import</span> <span class=\"pre\">spray.util._</span></tt> to bring all relevant identifiers into scope.</p>\n</div>\n<div class=\"section\" id=\"configuration\">\n<h2>Configuration</h2>\n<p>Just like Akka <em>spray-util</em> relies on the <a class=\"reference external\" href=\"https://github.com/typesafehub/config\">typesafe config</a> library for configuration. As such its JAR contains a\n<tt class=\"docutils literal\"><span class=\"pre\">reference.conf</span></tt> file holding the default values of all configuration settings. In your application you typically\nprovide an <tt class=\"docutils literal\"><span class=\"pre\">application.conf</span></tt>, in which you override Akka and/or <em>spray</em> settings according to your needs.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Since <em>spray</em> uses the same configuration technique as Akka you might want to check out the\n<a class=\"reference external\" href=\"http://doc.akka.io/docs/akka/2.0.4/general/configuration.html\">Akka Documentation on Configuration</a>.</p>\n</div>\n<p>This is the <tt class=\"docutils literal\"><span class=\"pre\">reference.conf</span></tt> of the <em>spray-util</em> module:</p>\n<div class=\"highlight-bash\"><div class=\"highlight\"><pre><span class=\"c\">####################################</span>\n<span class=\"c\"># spray-util Reference Config File #</span>\n<span class=\"c\">####################################</span>\n\n<span class=\"c\"># This is the reference config file that contains all the default settings.</span>\n<span class=\"c\"># Make your edits/overrides in your application.conf.</span>\n\nspray <span class=\"o\">{</span>\n\n  <span class=\"c\"># Always contains the deployed version of spray.</span>\n  <span class=\"c\"># Referenced, for example, from the `spray.can.server.server-header` setting.</span>\n  <span class=\"nv\">version</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;VERSION&gt;&quot;</span>\n\n  util <span class=\"o\">{</span>\n\n    <span class=\"c\"># Enables/disables the translation of ActorPaths from slash-separated to</span>\n    <span class=\"c\"># dot-separated, which opens them up to the hierarchy-based logger configuration</span>\n    <span class=\"c\"># of frameworks like logback or log4j.</span>\n    <span class=\"c\"># When logging via the `akka.event.slf4j.Slf4jEventHandler` and a LoggingContext</span>\n    <span class=\"c\"># created from an ActorContext the logger name will be, for example,</span>\n    <span class=\"c\"># - `akka://echo-server/user/io-bridge` with this setting off</span>\n    <span class=\"c\"># - `echo-server.user.io-bridge` with this setting on</span>\n    <span class=\"c\"># (assuming that `log-actor-system-name = off`)</span>\n    log-actor-paths-with-dots <span class=\"o\">=</span> off\n\n    <span class=\"c\"># Enables/disables the inclusion of the ActorSystem name in the log source / logger name.</span>\n    <span class=\"c\"># When logging via the `akka.event.slf4j.Slf4jEventHandler` and a LoggingContext</span>\n    <span class=\"c\"># created from an ActorContext the logger name will be, for example,</span>\n    <span class=\"c\"># - `akka://echo-server/user/io-bridge` with this setting off</span>\n    <span class=\"c\"># - `akka://echo-server/user/io-bridge(default-system)` with this setting on</span>\n    <span class=\"c\"># When combined with `log-actor-paths-with-dots = on` the logger name will be, for example,</span>\n    <span class=\"c\"># - `echo-server.user.io-bridge` with this setting off</span>\n    <span class=\"c\"># - `default-system.echo-server.user.io-bridge` with this setting on</span>\n    log-actor-system-name <span class=\"o\">=</span> off\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"pimps\">\n<h2>Pimps</h2>\n<p><em>spray-util</em> provides a number of convenient &#8220;extensions&#8221; to standard Scala and Akka classes.</p>\n<p>The currently available pimps can be found <a class=\"reference external\" href=\"https://github.com/spray/spray/tree/master/spray-util/src/main/scala/spray/util/pimps\">here</a>. Their hooks are placed in the <tt class=\"docutils literal\"><span class=\"pre\">spray.util</span></tt> <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-util/src/main/scala/spray/util/package.scala\">package object</a>,\nyou bring them in scope with the following import:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.util._</span>\n</pre></div>\n</div>\n<div class=\"admonition-side-note admonition\">\n<p class=\"first admonition-title\">Side Note</p>\n<p class=\"last\">Even though now officially somewhat frowned upon due to its arguably limited PC-ness we still like the term &#8220;pimps&#8221;\nfor these, since it honors the origins of the technique (the &#8220;pimp-my-library&#8221; pattern, as it was originally coined\nby Martin Odersky in a <a class=\"reference external\" href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=179766\">short article</a> in late 2006) and provides a very succinct and, in the scala community,\nwell-known label for it.</p>\n</div>\n</div>\n<div class=\"section\" id=\"akka-helpers\">\n<h2>Akka Helpers</h2>\n<p><em>spray-util</em> comes with a few utility tools for working with Akka:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"#unregisteredactorref\">UnregisteredActorRef</a></li>\n<li><a class=\"reference internal\" href=\"#reply-withcontext\">Reply.withContext</a></li>\n<li><a class=\"reference internal\" href=\"#loggingcontext\">LoggingContext</a></li>\n</ul>\n<div class=\"section\" id=\"unregisteredactorref\">\n<span id=\"id5\"></span><h3>UnregisteredActorRef</h3>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-util/src/main/scala/akka/spray/UnregisteredActorRef.scala\">UnregisteredActorRef</a> is an ActorRef, which</p>\n<ul class=\"simple\">\n<li>offers the ability to hook caller-side logic into the reply message path</li>\n<li>is never registered anywhere, i.e. can be GCed as soon the receiver drops it or is GCed itself</li>\n</ul>\n<p>When you send a message to an Actor with <tt class=\"docutils literal\"><span class=\"pre\">receiver.tell(msg,</span> <span class=\"pre\">sender)</span></tt> both the receiver as well as the sender have\nto be ActorRefs. Sometimes, however, you might want to inject logic, which is local to the call site of the <tt class=\"docutils literal\"><span class=\"pre\">tell</span></tt>,\ninto the message stream coming back from the receiver as replies to the message told.</p>\n<p>Check out this example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.actor._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n\n<span class=\"k\">val</span> <span class=\"n\">echoActor</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Props</span> <span class=\"o\">{</span>\n    <span class=\"k\">new</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n      <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">msg</span> <span class=\"k\">=&gt;</span> <span class=\"n\">sender</span> <span class=\"o\">!</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">toString</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">logToConsoleActor</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Props</span> <span class=\"o\">{</span>\n    <span class=\"k\">new</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n      <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">msg</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">echoActor</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"n\">logToConsoleActor</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>In this example the reply of an actor is channeled to a second actor, which simply logs it to the console.\nNow suppose that you want to modify the replies from the first actor before they reach the second actor.\nYou could do it this way:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">modReplyActor</span><span class=\"o\">(</span><span class=\"n\">receiver</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n  <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Props</span> <span class=\"o\">{</span>\n      <span class=\"k\">new</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n        <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n          <span class=\"k\">case</span> <span class=\"n\">msg</span> <span class=\"k\">=&gt;</span>\n            <span class=\"n\">receiver</span> <span class=\"o\">!</span> <span class=\"s\">&quot;The answer is: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">msg</span>\n            <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">echoActor</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"n\">modReplyActor</span><span class=\"o\">(</span><span class=\"n\">logToConsoleActor</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>This works but has a number of disadvantages. Firstly, we have to spin up a full actor just to inject the modification\nlogic into the reply message path. Even though Actors are lightweight the overhead of creation and teardown can be\nsignificant in high-throughput, more low-level layers of an application. Also, since our transformation logic is a\nsimple function without any internal state we are not really making use of the Actors ability to provide a\n&#8220;safe container&#8221; for mutable state in an otherwise parallel execution environment.</p>\n<p>More importantly though the actor in this scenario has the disadvantage of being registered with its system. This is\ngreat for being able to look it up by its path or address it remotely, but it requires that we shut it down when its\nnot needed anymore. It cannot automatically be garbage collected. This means that we have to supply it with some logic\ndetermining when to shut down. In our example we simply shut down after the first message.\nWhat if we wanted to apply our modification logic to <em>all</em> messages that our first actor sends as replies to the second,\neven if their number is not known a priori? If we have a way of determining which one is the last one, we can use it\nfor the shutdown, but what if we don&#8217;t?</p>\n<p>With <em>sprays</em> UnregisteredActorRef we could inject the transformation logic like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.spray.UnregisteredActorRef</span>\n\n<span class=\"k\">def</span> <span class=\"n\">modReply</span><span class=\"o\">(</span><span class=\"n\">receiver</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n  <span class=\"k\">new</span> <span class=\"nc\">UnregisteredActorRef</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">handle</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">sender</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">receiver</span> <span class=\"o\">!</span> <span class=\"s\">&quot;The answer is: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">msg</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">echoActor</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"n\">modReply</span><span class=\"o\">(</span><span class=\"n\">logToConsoleActor</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>Essentially the UnregisteredActorRef allows us to wrap custom logic into an ActorRef, which you can inject into\nmessage paths and which is very lightweight, because it is <em>not</em> registered. In our example this allows our modification\nfunction to stay in place for as long as the first actor holds on to its reference. As soon as its reference is dropped\nit can be GCed. No need to supply shutdown logic.</p>\n<div class=\"admonition caution\">\n<p class=\"first admonition-title\">Caution</p>\n<p>Since an <tt class=\"docutils literal\"><span class=\"pre\">UnregisteredActorRef</span></tt> is not registered it is <em>not</em> addressable from a non-local JVM\n(i.e. remotely) and it also breaks some otherwise valid Akka invariants like\n<tt class=\"docutils literal\"><span class=\"pre\">system.actorFor(ref.path.toString).equals(ref)</span></tt> in the local-only context.\nIt should therefore be used only in purely local environments and in full consideration of its limitations.</p>\n<p class=\"last\">However, it is possible to make an <tt class=\"docutils literal\"><span class=\"pre\">UnregisteredActorRef</span></tt> reachable remotely by explicitly wrapping it with a\nregistered <tt class=\"docutils literal\"><span class=\"pre\">ActorRef</span></tt>. The <tt class=\"docutils literal\"><span class=\"pre\">UnregisteredActorRef</span></tt> provides a number of <tt class=\"docutils literal\"><span class=\"pre\">register...</span></tt> methods for this purpose\n(check <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/v1.1-M7/spray-util/src/main/scala/akka/spray/UnregisteredActorRef.scala\">the sources</a> for more details on this).</p>\n</div>\n</div>\n<div class=\"section\" id=\"reply-withcontext\">\n<h3>Reply.withContext</h3>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">Reply.withContext</span></tt> helper builds upon <a class=\"reference internal\" href=\"#unregisteredactorref\">UnregisteredActorRef</a> to attach &#8220;context&#8221; objects to all replies coming\nback from an Actor as response to a specific tell.</p>\n<p>For example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.actor._</span>\n<span class=\"k\">import</span> <span class=\"nn\">akka.pattern.ask</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.util._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">timeout</span> <span class=\"k\">=</span> <span class=\"nc\">Timeout</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">echoActor</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Props</span> <span class=\"o\">{</span>\n    <span class=\"k\">new</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n      <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">msg</span> <span class=\"k\">=&gt;</span> <span class=\"n\">sender</span> <span class=\"o\">!</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">toString</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">mainActor</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Props</span> <span class=\"o\">{</span>\n    <span class=\"k\">new</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n      <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"-Symbol\">&#39;run</span> <span class=\"k\">=&gt;</span>\n          <span class=\"n\">echoActor</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"nc\">Reply</span><span class=\"o\">.</span><span class=\"n\">withContext</span><span class=\"o\">(</span><span class=\"n\">sender</span><span class=\"o\">))</span>\n\n        <span class=\"k\">case</span> <span class=\"nc\">Reply</span><span class=\"o\">(</span><span class=\"s\">&quot;42&quot;</span><span class=\"o\">,</span> <span class=\"n\">originalSender</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n          <span class=\"n\">originalSender</span> <span class=\"o\">!</span> <span class=\"-Symbol\">&#39;Ok</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">mainActor</span><span class=\"o\">.</span><span class=\"n\">ask</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;run</span><span class=\"o\">).</span><span class=\"n\">await</span> <span class=\"o\">===</span> <span class=\"-Symbol\">&#39;Ok</span>\n</pre></div>\n</div>\n<p>So, by using a <tt class=\"docutils literal\"><span class=\"pre\">Reply.withContext</span></tt> call as the sender of a <tt class=\"docutils literal\"><span class=\"pre\">tell</span></tt> you can attach a custom &#8220;context&#8221; object to a\nmessage, which you are going to receive together with each reply messages in an instance of the <tt class=\"docutils literal\"><span class=\"pre\">Reply</span></tt> case class.\nThis can be very handy in a number of situations, where you&#8217;d like to channel some local context through a\nrequest/response cycle with another actor. The overhead introduced by this mechanism of context keeping is really\nsmall, which makes it a viable solution for <em>local-only</em> messaging protocols.</p>\n<div class=\"admonition caution\">\n<p class=\"first admonition-title\">Caution</p>\n<p class=\"last\">Since <tt class=\"docutils literal\"><span class=\"pre\">Reply.withContext</span></tt> uses an UnregisteredActorRef underneath all the restrictions of such\nspecial ActorRefs (as discussed in the previous section) apply.\nIt should therefore be used only in purely local environments and in full consideration of its limitations.</p>\n</div>\n</div>\n<div class=\"section\" id=\"loggingcontext\">\n<h3>LoggingContext</h3>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">LoggingContext</span></tt> is a simple <tt class=\"docutils literal\"><span class=\"pre\">akka.event.LoggingAdapter</span></tt> that can be implicitly created from <tt class=\"docutils literal\"><span class=\"pre\">ActorRefFactory</span></tt>\ninstances (i.e. <tt class=\"docutils literal\"><span class=\"pre\">ActorSystems</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">ActorContexts</span></tt>). It is mainly used by <a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a> directives, which\nrequire a logging facility for either type of <tt class=\"docutils literal\"><span class=\"pre\">ActorRefFactory</span></tt>.</p>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">LoggingContext</span></tt> allows for some deeper configuration via the <tt class=\"docutils literal\"><span class=\"pre\">log-actor-paths-with-dots</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">log-actor-system-name</span></tt> config settings shown in the &#8220;Configuration&#8221; section above.</p>\n</div>\n<div class=\"section\" id=\"sprayactorlogging\">\n<h3>SprayActorLogging</h3>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">SprayActorLogging</span></tt> trait is a drop-in replacement for the <tt class=\"docutils literal\"><span class=\"pre\">akka.actor.ActorLogging</span></tt> trait, which provides\nlogging via a <tt class=\"docutils literal\"><span class=\"pre\">LoggingContext</span></tt> and therefore supports the same configuration options.</p>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "spray-util", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-util/index", "next": {"link": "../../project-info/", "title": "Project Info"}, "rellinks": [["genindex", "General Index", "I", "index"], ["project-info/index", "Project Info", "N", "next"], ["documentation/spray-testkit/index", "spray-testkit", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Documentation"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">spray-util</a><ul>\n<li><a class=\"reference internal\" href=\"#dependencies\">Dependencies</a></li>\n<li><a class=\"reference internal\" href=\"#installation\">Installation</a></li>\n<li><a class=\"reference internal\" href=\"#configuration\">Configuration</a></li>\n<li><a class=\"reference internal\" href=\"#pimps\">Pimps</a></li>\n<li><a class=\"reference internal\" href=\"#akka-helpers\">Akka Helpers</a><ul>\n<li><a class=\"reference internal\" href=\"#unregisteredactorref\">UnregisteredActorRef</a></li>\n<li><a class=\"reference internal\" href=\"#reply-withcontext\">Reply.withContext</a></li>\n<li><a class=\"reference internal\" href=\"#loggingcontext\">LoggingContext</a></li>\n<li><a class=\"reference internal\" href=\"#sprayactorlogging\">SprayActorLogging</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../spray-testkit/", "title": "spray-testkit"}, "metatags": ""}